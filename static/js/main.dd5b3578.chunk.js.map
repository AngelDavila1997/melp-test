{"version":3,"sources":["components/Cardtest2.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","spacing","palette","card","padding","borderRadius","margin","transition","transform","rating","verticalAlign","content","heading","fontSize","fontWeight","letterSpacing","marginBottom","marginRight","display","body","color","grey","divider","textFooter","icon","ReviewCard2","name","site","id","email","phone","street","city","state","styles","flexStyles","usePushingGutterStyles","space","useLabelIconStyles","linked","useRowFlexStyles","Card","className","elevation","CardContent","Box","mb","Rating","value","size","readOnly","Divider","light","parent","href","target","CardList","restaurants","map","user","i","Cardtest2","key","contact","address","Scroll","props","style","overflow","borderTop","height","children","App","fetch","then","response","json","data","setState","this","ainfo","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd5b3578.chunk.js","sourcesContent":["import React from 'react';\r\nimport cx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Link from '@material-ui/core/Link';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { usePushingGutterStyles } from '@mui-treasury/styles/gutter/pushing';\r\nimport { useLabelIconStyles } from '@mui-treasury/styles/icon/label';\r\nimport { useRowFlexStyles } from '@mui-treasury/styles/flex/row';\r\nimport './Card.css';\r\n\r\nconst useStyles = makeStyles(({ spacing, palette }) => ({\r\n  card: {\r\n    //display: 'inline-block',\r\n    padding: spacing(2),\r\n    borderRadius: 16,\r\n    margin: \"12px\",\r\n    transition: 'all 0.5s',\r\n\r\n    \"&:hover\": {\r\n      transform: \"scale(1.03)\",\r\n    }\r\n  },\r\n  rating: {\r\n    verticalAlign: 'text-top',\r\n  },\r\n  content: {\r\n    padding: spacing(0, 2, 0, 0),\r\n  },\r\n  heading: {\r\n    fontSize: 17,\r\n    fontWeight: 'bold',\r\n    letterSpacing: '0.5px',\r\n    marginBottom: 0,\r\n    marginRight: spacing(1.5),\r\n    display: 'inline-block',\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n    color: palette.grey[500],\r\n    display: 'inline-block',\r\n  },\r\n  divider: {\r\n    margin: spacing(1, 0),\r\n  },\r\n  textFooter: {\r\n    fontSize: 14,\r\n  },\r\n  icon: {\r\n    fontSize: '1.2rem',\r\n    verticalAlign: 'bottom',\r\n  },\r\n}));\r\n\r\nconst ReviewCard2 = ({name, rating, id, site, email, phone, street, city, state}) => {\r\n  const styles = useStyles();\r\n  const gutterStyles = usePushingGutterStyles({ space: 1.5 });\r\n  const labelStyles = useLabelIconStyles({ linked: true });\r\n  const flexStyles = useRowFlexStyles();\r\n  return (\r\n    <Card className={styles.card} elevation={3}>\r\n      <CardContent className={styles.content}>\r\n        <Box mb={1}>\r\n          <h3 className={styles.heading} className=\"restaurant\">{name} </h3>\r\n          <Rating\r\n            name={\"rating\"}\r\n            value={rating}\r\n            className={styles.rating}\r\n            size={'small'}\r\n            readOnly\r\n          />\r\n        </Box>\r\n        <Box  className={styles.body}>\r\n          <h1 className=\"text\">Address</h1>\r\n          <p>{street + \", \" + city + \", \" + state}</p>\r\n        </Box>\r\n        <Box className={styles.body}>\r\n          <h1 className=\"text\">Contact Information</h1>\r\n          <ul className=\"a\">\r\n            <li>{email}</li>\r\n            <li>{phone}</li>\r\n          </ul>\r\n        </Box>\r\n        <Divider className={styles.divider} light />\r\n        <div className={flexStyles.parent}>\r\n          {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n          <a href={site} target=\"blank\" className=\"rlink\">Know more about us!</a>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ReviewCard2;","import React from 'react';\r\nimport Cardtest2 from './Cardtest2';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Card.css';\r\nconst CardList = ({ restaurants }) => {\r\n  return (\r\n    <div className=\"rearrange\">\r\n      {\r\n        restaurants.map((user, i) => {\r\n          return (\r\n              <Cardtest2\r\n                key={i}\r\n                id={restaurants[i].id}\r\n                name={restaurants[i].name}\r\n                rating={restaurants[i].rating}\r\n                site={restaurants[i].contact.site}\r\n                email={restaurants[i].contact.email}\r\n                phone={restaurants[i].contact.phone}\r\n                street={restaurants[i].address.street}\r\n                city={restaurants[i].address.city}\r\n                state={restaurants[i].address.state}\r\n                />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', borderTop: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      restaurants: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json')\n      .then(response=> response.json())\n      .then(data => {this.setState({ restaurants: data})});\n  }\n\n\n  render() {\n    const { restaurants} = this.state;\n    const ainfo = restaurants;\n    return !restaurants.length ?\n      <h1 className='loading'>Loading</h1> :\n      (\n        <div>\n          <nav className='banner'>\n            <h1 className='title'>Melp.</h1>\n          </nav>\n          <div className='tc'>\n            <Scroll>\n                <CardList restaurants={ainfo} />\n            </Scroll>\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}